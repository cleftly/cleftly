name: 'publish'
on:
    push:
        branches:
            - release

jobs:
    publish-tauri:
        permissions:
            contents: write
        strategy:
            fail-fast: false
            matrix:
                settings:
                    - platform: 'macos-latest'
                      args: '--target universal-apple-darwin'
                    - platform: 'ubuntu-22.04'
                      args: ''
                    # - platform: 'ubuntu-22.04'
                    #   args: '--target aarch64-unknown-linux-gnu --bundles deb'
                    - platform: 'windows-latest'
                      args: '--target x86_64-pc-windows-msvc'

        runs-on: ${{ matrix.settings.platform }}

        steps:
            - name: checkout
              uses: actions/checkout@v3
              with:
                  lfs: 'true'

            - name: Install dependencies (ubuntu only)
              if: matrix.settings.platform == 'ubuntu-22.04'
              # You can remove libayatana-appindicator3-dev if you don't use the system tray feature.
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev librsvg2-dev patchelf alsa-tools libasound2-dev libudev-dev
              # gcc-aarch64-linux-gnu
              #   export linker=gcc-aarch64-linux-gnu
              #   sudo dpkg --add-architecture arm64
              #   sudo touch /etc/apt/sources.list.d/arm-cross-compile-sources.list
              #   sudo bash -c 'echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy main restricted" >> /etc/apt/sources.list.d/arm-cross-compile-sources.list'
              #   sudo bash -c 'echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted" >> /etc/apt/sources.list.d/arm-cross-compile-sources.list'
              #   sudo bash -c 'echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy universe" >> /etc/apt/sources.list.d/arm-cross-compile-sources.list'
              #   sudo bash -c 'echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates universe" >> /etc/apt/sources.list.d/arm-cross-compile-sources.list'
              #   sudo bash -c 'echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy multiverse" >> /etc/apt/sources.list.d/arm-cross-compile-sources.list'
              #   sudo bash -c 'echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates multiverse" >> /etc/apt/sources.list.d/arm-cross-compile-sources.list'
              #   sudo bash -c 'echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-backports main restricted universe multiverse" >> /etc/apt/sources.list.d/arm-cross-compile-sources.list'
              #   sudo bash -c 'echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security main restricted" >> /etc/apt/sources.list.d/arm-cross-compile-sources.list'
              #   sudo bash -c 'echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security universe" >> /etc/apt/sources.list.d/arm-cross-compile-sources.list'
              #   sudo bash -c 'echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security multiverse" >> /etc/apt/sources.list.d/arm-cross-compile-sources.list'

              #   sudo apt update
              #   sudo apt install libwebkit2gtk-4.0-dev:arm64
              #   export PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu/

            - name: Rust setup
              uses: dtolnay/rust-toolchain@stable

            - name: Rust cache
              uses: swatinem/rust-cache@v2
              with:
                  workspaces: './src-tauri -> target'

            - uses: pnpm/action-setup@v2
              name: Install pnpm
              with:
                  version: 8
                  run_install: false

            - name: Sync node version and setup cache
              uses: actions/setup-node@v3
              with:
                  node-version: 20
                  cache: 'pnpm' # Set this to npm, yarn or pnpm.

            - name: Install frontend dependencies
              # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
              run: pnpm install # Change this to npm, yarn or pnpm.

            - name: Build the app
              uses: tauri-apps/tauri-action@v0

              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
                  TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
              with:
                  tagName: '__VERSION__' # This only works if your workflow triggers on new tags.
                  releaseName: 'Cleftly v__VERSION__' # tauri-action replaces \_\_VERSION\_\_ with the app version.
                  releaseBody: 'See the assets to download and install this version.'
                  releaseDraft: true
                  prerelease: false
